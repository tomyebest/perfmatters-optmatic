---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'

type Props = {
	data: CollectionEntry<'blog'>['data']
	headings: MarkdownHeading[]
	readTime: string
}

const { data, readTime, headings } = Astro.props
const { title, description, pubDate, heroImage, tags } = data

const articleDate = pubDate.toISOString()
---

<BaseLayout
	title={title}
	description={description}
	image={heroImage?.src}
	articleDate={articleDate}
>
	<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none'>
		<div class='w-full'>
			<div
				class='relative isolate overflow-hidden bg-zinc-950 px-4 py-14 rounded-lg sm:px-4 sm:py-12 lg:py-14 xl:px-8 border-0'
			>
				<div
					class='grid grid-cols-1 gap-x-8 gap-y-16 sm:gap-y-20 lg:mx-0 lg:max-w-none lg:grid-cols-2 lg:items-center lg:gap-y-0'
				>
					<div class='lg:row-start-2 lg:max-w-md'>
						<h1 class='text-4xl font-bold tracking-tight text-lime-50 sm:text-4xl ml-4'>
							{title}
						</h1>
						<p class='text-sm leading-tight text-lime-50 font-light ml-4 my-4'>{description}</p>
						<hr class='bg-lime-50 ml-4' />
						<div class='flex items-center gap-x-1 ml-4 mt-4'>
							<p class='text-md leading-tight text-lime-50 font-light'>
								<FormattedDate date={pubDate} />
							</p>
							<p class='text-sm leading-tight text-lime-50 font-light'>
								- [{readTime}.]
							</p>
						</div>
						<div class='flex flex-wrap items-start gap-2 gap-y-4 md:gap-5 ml-4 mt-4'>
							{tags.map((tag: any) => <Tag tag={tag}>{tag}</Tag>)}
						</div>
					</div>
					<div
						class='relative -z-20 min-w-full max-w-xl rounded-xl lg:row-span-4 lg:w-[50rem] lg:max-w-none shadow-xl saturate-100'
					>
						<div class='relative'>
							{
								heroImage && (
									<Image
										src={heroImage}
										width={1000}
										height={500}
										quality={100}
										format='jpg'
										loading='eager'
										class='rounded-md w-full max-h-[300px] md:max-h-[500px] my-8 object-cover opacity-0 transition-opacity duration-700 ease-in'
										alt={`img of ${title}`}
									/>
								)
							}
							<div
								style='backdrop-filter: blur(25px) saturate(180%);'
								class='placeholder absolute inset-0 blur rounded-md transition-opacity duration-700 ease-out border-2 border-zinc-950 bg-zinc-950 bg-opacity-100'
							>
							</div>
						</div>
					</div>
				</div>
				<div
					class='pointer-events-none absolute left-12 top-1/2 -z-10 -translate-y-1/2 transform-gpu blur-3xl lg:bottom-[-12rem] lg:top-auto lg:translate-y-0 lg:transform-gpu'
					aria-hidden='true'
				>
					<div
						class='aspect-[1155/678] w-[72.1875rem] bg-gradient-to-r from-lime-400 to-lime-50 opacity-25'
						style={{
							clipPath:
								'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)'
						}}
					>
					</div>
				</div>
			</div>
		</div>
		<div>
			<slot />
		</div>
	</article>

	<!-- <article class='min-w-full md:py-4 sm:max-w-none md:max-w-none'>
		<header class='mb-3 flex flex-col justify-center items-center gap-6'>
			<div class='flex flex-col gap-2'>
				<div class='flex items-center justify-center gap-x-1'>
					<p class='text-center text-sm text-opacity-50'>
						Published <FormattedDate date={pubDate} />
					</p>
					<p class='text-center text-sm text-opacity-50 font-bold'>
						- {readTime}
					</p>
				</div>
				<h1 class='title text-center text-4xl md:text-6xl md:pb-2.5 font-semibold opacity-0'>
					{title}
				</h1>
			</div>

			<div class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5'>
				{tags.map((tag) => <Tag>{tag}</Tag>)}
			</div>
		</header>

		<div class='relative'>
			{
				heroImage && (
					<Image
						src={heroImage}
						width={1000}
						height={500}
						quality={100}
						format='jpg'
						loading='eager'
						class='rounded-md w-full max-h-[300px]  md:max-h-[500px] my-8 object-cover opacity-0 transition-opacity duration-700 ease-in'
						alt={`img of ${title}`}
					/>
				)
			}
			<div
				style='backdrop-filter: blur(25px) saturate(180%);'
				class='placeholder absolute inset-0 blur rounded-md transition-opacity duration-700 ease-out border-2 border-neutral-200 bg-gray-200 dark:border-neutral-900 dark:bg-zinc-900 bg-opacity-90'
			>
			</div>
		</div>

		<hr />

		<div>
			<slot />
		</div>
	</article> -->
</BaseLayout>
<script is:inline>
	const img = document.querySelector('img')
	const placeholder = document.querySelector('.placeholder')

	img?.addEventListener('load', () => {
		img.classList.add('opacity-100')
		placeholder.classList.add('opacity-0')
	})
</script>

<script>
	import { animate } from 'motion'

	animate(
		'.title',
		{
			opacity: [0, 1],
			clipPath: ['polygon(0 0, 0 0, 0 100%, 0% 100%)', 'polygon(100% 0, 0 0, 0 100%, 100% 100%)']
		},
		{ duration: 1, easing: 'ease-in-out' }
	)
</script>

<style>
	aside a {
		background-color: black;
		color: var(--zinc-950, #1f2937); /* Assuming zinc-950 maps to #1F2937 */
		border-radius: 8px; /* Adjust value as needed */
		padding: 8px; /* Adjust value as needed */
	}
</style>

<script>
	function handleIntersection(
		entries: IntersectionObserverEntry[],
		observer: IntersectionObserver
	) {
		entries.forEach((entry) => {
			const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

			if (entry.isIntersecting) {
				index?.classList.remove('bg-lime-50', 'rounded-xl') // remove bg
				index?.classList.add(
					'border-zinc=950',
					'active:ring-lime-200',
					'rounded-xl',
					'text-zinc-950',
					'font-bold',
					'transition-colors',
					'duration-200'
				)
			} else {
				index?.classList.add('bg-lime-50') // add bg
				index?.classList.remove(
					'text-zinc-950',
					'rounded-xl',
					'font-bold',
					'transition-colors',
					'duration-200'
				)
			}
		})
	}

	const headings = document.querySelectorAll(
		'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
	)

	const options = {
		root: null,
		rootMargin: ' 15% 0px 0% 0px ',
		threshold: 1
	}

	const observer = new IntersectionObserver(handleIntersection, options)

	headings.forEach((heading) => {
		observer.observe(heading)
	})
</script>
